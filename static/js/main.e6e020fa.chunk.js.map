{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","onDataUpdate","a","async","axios","get","then","res","setState","signal","data","console","log","state","defaults","baseURL","_id","type","manufacture","average","number","__v","color","time","bind","setInterval","this","className","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uTAoFeA,G,kBAzEb,WAAYC,GAAe,IAAD,8BACxB,4CAAMA,KA4BRC,aAAe,oBAAAC,EAAAC,OAAA,gDACbC,IACGC,IAAI,gBACJC,MAAK,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEC,OAAQF,EAAIG,UAClDC,QAAQC,IAAI,EAAKC,MAAMJ,QACvBL,IACGC,IAAI,aACJC,MAAK,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEE,KAAMH,EAAIG,UAChDC,QAAQC,IAAI,EAAKC,MAAMH,MARV,sCA1BbN,IAAMU,SAASC,QAAU,8BAEzB,EAAKF,MAAQ,CACXH,KAAM,CACJ,CACEM,IAAK,2BACLC,KAAM,OACNC,YAAa,KACbC,QAAS,GACTC,OAAQ,KACRC,IAAK,IAGTZ,OAAQ,CACN,CAAEO,IAAK,2BAA4BM,MAAO,QAASC,KAAM,GAAIF,IAAK,KAItE,EAAKpB,aAAe,EAAKA,aAAauB,KAAlB,gBArBI,E,iFAwBL,IAAD,OAClBC,aAAY,kBAAM,EAAKxB,iBAAgB,M,+BAe/B,IAAD,EACkByB,KAAKb,MAAtBH,EADD,EACCA,KAAMD,EADP,EACOA,OACd,OACE,yBAAKkB,UAAU,OACb,gCACE,kDAEF,6BACE,6BACE,yBACEC,IAAI,iEACJC,IAAI,KAEN,8CAAUnB,EAAKO,MACf,8CAAU,KAAOP,EAAKQ,aACtB,2DAAaR,EAAKS,QAAlB,MACA,8CAAUT,EAAKU,SAEjB,6BACE,6BACE,sCACA,6BACE,2DAAaX,EAAOa,OACpB,2DAAab,EAAOc,KAApB,mB,GAhEEO,IAAMC,YCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.e6e020fa.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.scss\";\n\ninterface Props {}\ninterface State {\n  data: any;\n  signal: any;\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    axios.defaults.baseURL = \"http://3.16.138.58:4000/api\";\n\n    this.state = {\n      data: [\n        {\n          _id: \"5e10e07e48b1a018769d8498\",\n          type: \"benz\",\n          manufacture: 2019,\n          average: 60,\n          number: 9999,\n          __v: 0\n        }\n      ],\n      signal: [\n        { _id: \"5e10e98b48b1a018769d89af\", color: \"GREEN\", time: 37, __v: 0 }\n      ]\n    };\n\n    this.onDataUpdate = this.onDataUpdate.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(() => this.onDataUpdate(), 20);\n    // return this.onDataUpdate();\n  }\n\n  onDataUpdate = async () => {\n    axios\n      .get(\"/signal/info\")\n      .then((res: any) => this.setState({ signal: res.data }));\n    console.log(this.state.signal);\n    axios\n      .get(\"/car/info\")\n      .then((res: any) => this.setState({ data: res.data }));\n    console.log(this.state.data);\n  };\n\n  render() {\n    const { data, signal } = this.state;\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>오빠 char</h1>\n        </header>\n        <div>\n          <div>\n            <img\n              src=\"http://item.ssgcdn.com/01/15/12/item/1000024121501_i1_1200.jpg\"\n              alt=\"\"\n            />\n            <div>차종: {data.type}</div>\n            <div>연식: {2020 - data.manufacture}</div>\n            <div>평균 시속: {data.average}km</div>\n            <div>번호: {data.number}</div>\n          </div>\n          <div>\n            <div>\n              <h1>G-CAMP</h1>\n              <div>\n                <div>현재 신호: {signal.color}</div>\n                <div>점등 시간: {signal.time}초</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}